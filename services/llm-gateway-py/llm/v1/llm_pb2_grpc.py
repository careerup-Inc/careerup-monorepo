# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from llm.v1 import llm_pb2 as llm_dot_v1_dot_llm__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in llm/v1/llm_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class LLMServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GenerateStream = channel.unary_stream(
                '/llm.v1.LLMService/GenerateStream',
                request_serializer=llm_dot_v1_dot_llm__pb2.GenerateStreamRequest.SerializeToString,
                response_deserializer=llm_dot_v1_dot_llm__pb2.GenerateStreamResponse.FromString,
                _registered_method=True)
        self.GenerateWithRAG = channel.unary_stream(
                '/llm.v1.LLMService/GenerateWithRAG',
                request_serializer=llm_dot_v1_dot_llm__pb2.GenerateWithRAGRequest.SerializeToString,
                response_deserializer=llm_dot_v1_dot_llm__pb2.GenerateWithRAGResponse.FromString,
                _registered_method=True)
        self.IngestDocument = channel.unary_unary(
                '/llm.v1.LLMService/IngestDocument',
                request_serializer=llm_dot_v1_dot_llm__pb2.IngestDocumentRequest.SerializeToString,
                response_deserializer=llm_dot_v1_dot_llm__pb2.IngestDocumentResponse.FromString,
                _registered_method=True)
        self.CreateCollection = channel.unary_unary(
                '/llm.v1.LLMService/CreateCollection',
                request_serializer=llm_dot_v1_dot_llm__pb2.CreateCollectionRequest.SerializeToString,
                response_deserializer=llm_dot_v1_dot_llm__pb2.CreateCollectionResponse.FromString,
                _registered_method=True)
        self.ListCollections = channel.unary_unary(
                '/llm.v1.LLMService/ListCollections',
                request_serializer=llm_dot_v1_dot_llm__pb2.ListCollectionsRequest.SerializeToString,
                response_deserializer=llm_dot_v1_dot_llm__pb2.ListCollectionsResponse.FromString,
                _registered_method=True)
        self.DeleteCollection = channel.unary_unary(
                '/llm.v1.LLMService/DeleteCollection',
                request_serializer=llm_dot_v1_dot_llm__pb2.DeleteCollectionRequest.SerializeToString,
                response_deserializer=llm_dot_v1_dot_llm__pb2.DeleteCollectionResponse.FromString,
                _registered_method=True)


class LLMServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GenerateStream(self, request, context):
        """GenerateStream streams responses from the LLM.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateWithRAG(self, request, context):
        """GenerateWithRAG streams RAG-augmented responses from the LLM.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IngestDocument(self, request, context):
        """Admin endpoints for dynamic document management
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateCollection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListCollections(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteCollection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LLMServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GenerateStream': grpc.unary_stream_rpc_method_handler(
                    servicer.GenerateStream,
                    request_deserializer=llm_dot_v1_dot_llm__pb2.GenerateStreamRequest.FromString,
                    response_serializer=llm_dot_v1_dot_llm__pb2.GenerateStreamResponse.SerializeToString,
            ),
            'GenerateWithRAG': grpc.unary_stream_rpc_method_handler(
                    servicer.GenerateWithRAG,
                    request_deserializer=llm_dot_v1_dot_llm__pb2.GenerateWithRAGRequest.FromString,
                    response_serializer=llm_dot_v1_dot_llm__pb2.GenerateWithRAGResponse.SerializeToString,
            ),
            'IngestDocument': grpc.unary_unary_rpc_method_handler(
                    servicer.IngestDocument,
                    request_deserializer=llm_dot_v1_dot_llm__pb2.IngestDocumentRequest.FromString,
                    response_serializer=llm_dot_v1_dot_llm__pb2.IngestDocumentResponse.SerializeToString,
            ),
            'CreateCollection': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCollection,
                    request_deserializer=llm_dot_v1_dot_llm__pb2.CreateCollectionRequest.FromString,
                    response_serializer=llm_dot_v1_dot_llm__pb2.CreateCollectionResponse.SerializeToString,
            ),
            'ListCollections': grpc.unary_unary_rpc_method_handler(
                    servicer.ListCollections,
                    request_deserializer=llm_dot_v1_dot_llm__pb2.ListCollectionsRequest.FromString,
                    response_serializer=llm_dot_v1_dot_llm__pb2.ListCollectionsResponse.SerializeToString,
            ),
            'DeleteCollection': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteCollection,
                    request_deserializer=llm_dot_v1_dot_llm__pb2.DeleteCollectionRequest.FromString,
                    response_serializer=llm_dot_v1_dot_llm__pb2.DeleteCollectionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'llm.v1.LLMService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('llm.v1.LLMService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class LLMService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GenerateStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/llm.v1.LLMService/GenerateStream',
            llm_dot_v1_dot_llm__pb2.GenerateStreamRequest.SerializeToString,
            llm_dot_v1_dot_llm__pb2.GenerateStreamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GenerateWithRAG(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/llm.v1.LLMService/GenerateWithRAG',
            llm_dot_v1_dot_llm__pb2.GenerateWithRAGRequest.SerializeToString,
            llm_dot_v1_dot_llm__pb2.GenerateWithRAGResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def IngestDocument(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/llm.v1.LLMService/IngestDocument',
            llm_dot_v1_dot_llm__pb2.IngestDocumentRequest.SerializeToString,
            llm_dot_v1_dot_llm__pb2.IngestDocumentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateCollection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/llm.v1.LLMService/CreateCollection',
            llm_dot_v1_dot_llm__pb2.CreateCollectionRequest.SerializeToString,
            llm_dot_v1_dot_llm__pb2.CreateCollectionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListCollections(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/llm.v1.LLMService/ListCollections',
            llm_dot_v1_dot_llm__pb2.ListCollectionsRequest.SerializeToString,
            llm_dot_v1_dot_llm__pb2.ListCollectionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteCollection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/llm.v1.LLMService/DeleteCollection',
            llm_dot_v1_dot_llm__pb2.DeleteCollectionRequest.SerializeToString,
            llm_dot_v1_dot_llm__pb2.DeleteCollectionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
