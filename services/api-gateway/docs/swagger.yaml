basePath: /
definitions:
  client.IloDomainScore:
    properties:
      domain_code:
        type: string
      level:
        type: string
      percent:
        type: number
      rank:
        type: integer
      raw_score:
        type: integer
    type: object
  client.TokenResponse:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      refresh_token:
        type: string
    type: object
  handler.ErrorResponse:
    properties:
      error:
        example: error message
        type: string
    type: object
  handler.GetIloTestResponse:
    properties:
      domains:
        items:
          $ref: '#/definitions/handler.IloDomain'
        type: array
      levels:
        items:
          $ref: '#/definitions/handler.IloLevel'
        type: array
      questions:
        items:
          $ref: '#/definitions/handler.IloTestQuestion'
        type: array
    type: object
  handler.IloAnswer:
    properties:
      question_id:
        type: string
      question_number:
        type: integer
      selected_option:
        type: integer
    type: object
  handler.IloDomain:
    properties:
      code:
        type: string
      description:
        type: string
      name:
        type: string
    type: object
  handler.IloLevel:
    properties:
      level_name:
        type: string
      max_percent:
        type: integer
      min_percent:
        type: integer
      suggestion:
        type: string
    type: object
  handler.IloTestQuestion:
    properties:
      domain_code:
        type: string
      id:
        type: string
      options:
        items:
          type: string
        type: array
      question_number:
        type: integer
      text:
        type: string
    type: object
  handler.IloTestResultRequest:
    properties:
      answers:
        items:
          $ref: '#/definitions/handler.IloAnswer'
        type: array
      result_data:
        example: '{"score":85,"details":{...}}'
        type: string
    type: object
  handler.IloTestResultResponse:
    properties:
      created_at:
        type: string
      id:
        type: string
      result_data:
        type: string
      scores:
        items:
          $ref: '#/definitions/client.IloDomainScore'
        type: array
      suggested_careers:
        items:
          type: string
        type: array
      top_domains:
        items:
          type: string
        type: array
      user_id:
        type: string
    type: object
  handler.LoginRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: password123
        type: string
    required:
    - email
    - password
    type: object
  handler.LoginResponse:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      user:
        $ref: '#/definitions/handler.User'
    type: object
  handler.RefreshTokenRequest:
    properties:
      refresh_token:
        example: your_refresh_token_here
        type: string
    type: object
  handler.RegisterRequest:
    properties:
      email:
        example: user@example.com
        type: string
      first_name:
        example: John
        type: string
      last_name:
        example: Doe
        type: string
      password:
        example: password123
        minLength: 8
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    type: object
  handler.UpdateUserRequest:
    properties:
      first_name:
        example: John
        type: string
      hometown:
        example: New York
        type: string
      interests:
        example:
        - '[''AI'''
        - ' ''Machine Learning'']'
        items:
          type: string
        type: array
      last_name:
        example: Doe
        type: string
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    required:
    - token
    type: object
  handler.User:
    properties:
      email:
        example: user@example.com
        type: string
      first_name:
        example: John
        type: string
      hometown:
        example: New York
        type: string
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      interests:
        example:
        - '[''AI'''
        - ' ''Machine Learning'']'
        items:
          type: string
        type: array
      last_name:
        example: Doe
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is the CareerUP API server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: CareerUP API
  version: "1.0"
paths:
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Login user with email and password
      parameters:
      - description: Login Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Login user
      tags:
      - auth
  /api/v1/auth/refresh:
    post:
      consumes:
      - application/json
      description: Provides new access and refresh tokens using a valid refresh token
      parameters:
      - description: Refresh Token Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/client.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Refresh authentication token
      tags:
      - auth
  /api/v1/auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with email and password
      parameters:
      - description: Register Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handler.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Register a new user
      tags:
      - auth
  /api/v1/auth/validate:
    get:
      consumes:
      - application/json
      description: Validate an authentication token
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Validate token
      tags:
      - auth
  /api/v1/ilo/result:
    post:
      consumes:
      - application/json
      description: Submit ILO test result for the authenticated user and get analysis
      parameters:
      - description: ILO Test Result Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.IloTestResultRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handler.IloTestResultResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Submit ILO test result
      tags:
      - ilo
  /api/v1/ilo/result/{id}:
    get:
      description: Get a specific ILO test result by ID for the authenticated user
      parameters:
      - description: Result ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.IloTestResultResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Get a specific ILO test result by ID
      tags:
      - ilo
  /api/v1/ilo/results:
    get:
      description: Get all ILO test results for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handler.IloTestResultResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Get all ILO test results for a user
      tags:
      - ilo
  /api/v1/ilo/test:
    get:
      description: Get all questions for the ILO test
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.GetIloTestResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Get ILO test questions
      tags:
      - ilo
  /api/v1/profile:
    put:
      consumes:
      - application/json
      description: Update the current authenticated user's profile
      parameters:
      - description: Update Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update current user
      tags:
      - user
  /api/v1/user/me:
    get:
      description: Get the current authenticated user's profile
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get current user
      tags:
      - user
  /api/v1/ws:
    get:
      description: WebSocket endpoint for real-time chat
      responses:
        "101":
          description: Switching Protocols
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: WebSocket chat
      tags:
      - chat
schemes:
- http
securityDefinitions:
  BearerAuth:
    type: http
    scheme: bearer
    bearerFormat: JWT
    in: header
    name: Authorization
security:
  - BearerAuth: []
swagger: "2.0"
