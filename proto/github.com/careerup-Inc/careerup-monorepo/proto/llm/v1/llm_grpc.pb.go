// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: llm/v1/llm.proto

package llmv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LLMService_GenerateStream_FullMethodName   = "/llm.v1.LLMService/GenerateStream"
	LLMService_GenerateWithRAG_FullMethodName  = "/llm.v1.LLMService/GenerateWithRAG"
	LLMService_IngestDocument_FullMethodName   = "/llm.v1.LLMService/IngestDocument"
	LLMService_CreateCollection_FullMethodName = "/llm.v1.LLMService/CreateCollection"
	LLMService_ListCollections_FullMethodName  = "/llm.v1.LLMService/ListCollections"
	LLMService_DeleteCollection_FullMethodName = "/llm.v1.LLMService/DeleteCollection"
)

// LLMServiceClient is the client API for LLMService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LLMServiceClient interface {
	// GenerateStream streams responses from the LLM.
	GenerateStream(ctx context.Context, in *GenerateStreamRequest, opts ...grpc.CallOption) (LLMService_GenerateStreamClient, error)
	// GenerateWithRAG streams RAG-augmented responses from the LLM.
	GenerateWithRAG(ctx context.Context, in *GenerateWithRAGRequest, opts ...grpc.CallOption) (LLMService_GenerateWithRAGClient, error)
	// Admin endpoints for dynamic document management
	IngestDocument(ctx context.Context, in *IngestDocumentRequest, opts ...grpc.CallOption) (*IngestDocumentResponse, error)
	CreateCollection(ctx context.Context, in *CreateCollectionRequest, opts ...grpc.CallOption) (*CreateCollectionResponse, error)
	ListCollections(ctx context.Context, in *ListCollectionsRequest, opts ...grpc.CallOption) (*ListCollectionsResponse, error)
	DeleteCollection(ctx context.Context, in *DeleteCollectionRequest, opts ...grpc.CallOption) (*DeleteCollectionResponse, error)
}

type lLMServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLLMServiceClient(cc grpc.ClientConnInterface) LLMServiceClient {
	return &lLMServiceClient{cc}
}

func (c *lLMServiceClient) GenerateStream(ctx context.Context, in *GenerateStreamRequest, opts ...grpc.CallOption) (LLMService_GenerateStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &LLMService_ServiceDesc.Streams[0], LLMService_GenerateStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &lLMServiceGenerateStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LLMService_GenerateStreamClient interface {
	Recv() (*GenerateStreamResponse, error)
	grpc.ClientStream
}

type lLMServiceGenerateStreamClient struct {
	grpc.ClientStream
}

func (x *lLMServiceGenerateStreamClient) Recv() (*GenerateStreamResponse, error) {
	m := new(GenerateStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *lLMServiceClient) GenerateWithRAG(ctx context.Context, in *GenerateWithRAGRequest, opts ...grpc.CallOption) (LLMService_GenerateWithRAGClient, error) {
	stream, err := c.cc.NewStream(ctx, &LLMService_ServiceDesc.Streams[1], LLMService_GenerateWithRAG_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &lLMServiceGenerateWithRAGClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LLMService_GenerateWithRAGClient interface {
	Recv() (*GenerateWithRAGResponse, error)
	grpc.ClientStream
}

type lLMServiceGenerateWithRAGClient struct {
	grpc.ClientStream
}

func (x *lLMServiceGenerateWithRAGClient) Recv() (*GenerateWithRAGResponse, error) {
	m := new(GenerateWithRAGResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *lLMServiceClient) IngestDocument(ctx context.Context, in *IngestDocumentRequest, opts ...grpc.CallOption) (*IngestDocumentResponse, error) {
	out := new(IngestDocumentResponse)
	err := c.cc.Invoke(ctx, LLMService_IngestDocument_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lLMServiceClient) CreateCollection(ctx context.Context, in *CreateCollectionRequest, opts ...grpc.CallOption) (*CreateCollectionResponse, error) {
	out := new(CreateCollectionResponse)
	err := c.cc.Invoke(ctx, LLMService_CreateCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lLMServiceClient) ListCollections(ctx context.Context, in *ListCollectionsRequest, opts ...grpc.CallOption) (*ListCollectionsResponse, error) {
	out := new(ListCollectionsResponse)
	err := c.cc.Invoke(ctx, LLMService_ListCollections_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lLMServiceClient) DeleteCollection(ctx context.Context, in *DeleteCollectionRequest, opts ...grpc.CallOption) (*DeleteCollectionResponse, error) {
	out := new(DeleteCollectionResponse)
	err := c.cc.Invoke(ctx, LLMService_DeleteCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LLMServiceServer is the server API for LLMService service.
// All implementations must embed UnimplementedLLMServiceServer
// for forward compatibility
type LLMServiceServer interface {
	// GenerateStream streams responses from the LLM.
	GenerateStream(*GenerateStreamRequest, LLMService_GenerateStreamServer) error
	// GenerateWithRAG streams RAG-augmented responses from the LLM.
	GenerateWithRAG(*GenerateWithRAGRequest, LLMService_GenerateWithRAGServer) error
	// Admin endpoints for dynamic document management
	IngestDocument(context.Context, *IngestDocumentRequest) (*IngestDocumentResponse, error)
	CreateCollection(context.Context, *CreateCollectionRequest) (*CreateCollectionResponse, error)
	ListCollections(context.Context, *ListCollectionsRequest) (*ListCollectionsResponse, error)
	DeleteCollection(context.Context, *DeleteCollectionRequest) (*DeleteCollectionResponse, error)
	mustEmbedUnimplementedLLMServiceServer()
}

// UnimplementedLLMServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLLMServiceServer struct {
}

func (UnimplementedLLMServiceServer) GenerateStream(*GenerateStreamRequest, LLMService_GenerateStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GenerateStream not implemented")
}
func (UnimplementedLLMServiceServer) GenerateWithRAG(*GenerateWithRAGRequest, LLMService_GenerateWithRAGServer) error {
	return status.Errorf(codes.Unimplemented, "method GenerateWithRAG not implemented")
}
func (UnimplementedLLMServiceServer) IngestDocument(context.Context, *IngestDocumentRequest) (*IngestDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IngestDocument not implemented")
}
func (UnimplementedLLMServiceServer) CreateCollection(context.Context, *CreateCollectionRequest) (*CreateCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCollection not implemented")
}
func (UnimplementedLLMServiceServer) ListCollections(context.Context, *ListCollectionsRequest) (*ListCollectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCollections not implemented")
}
func (UnimplementedLLMServiceServer) DeleteCollection(context.Context, *DeleteCollectionRequest) (*DeleteCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCollection not implemented")
}
func (UnimplementedLLMServiceServer) mustEmbedUnimplementedLLMServiceServer() {}

// UnsafeLLMServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LLMServiceServer will
// result in compilation errors.
type UnsafeLLMServiceServer interface {
	mustEmbedUnimplementedLLMServiceServer()
}

func RegisterLLMServiceServer(s grpc.ServiceRegistrar, srv LLMServiceServer) {
	s.RegisterService(&LLMService_ServiceDesc, srv)
}

func _LLMService_GenerateStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GenerateStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LLMServiceServer).GenerateStream(m, &lLMServiceGenerateStreamServer{stream})
}

type LLMService_GenerateStreamServer interface {
	Send(*GenerateStreamResponse) error
	grpc.ServerStream
}

type lLMServiceGenerateStreamServer struct {
	grpc.ServerStream
}

func (x *lLMServiceGenerateStreamServer) Send(m *GenerateStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _LLMService_GenerateWithRAG_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GenerateWithRAGRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LLMServiceServer).GenerateWithRAG(m, &lLMServiceGenerateWithRAGServer{stream})
}

type LLMService_GenerateWithRAGServer interface {
	Send(*GenerateWithRAGResponse) error
	grpc.ServerStream
}

type lLMServiceGenerateWithRAGServer struct {
	grpc.ServerStream
}

func (x *lLMServiceGenerateWithRAGServer) Send(m *GenerateWithRAGResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _LLMService_IngestDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IngestDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LLMServiceServer).IngestDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LLMService_IngestDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LLMServiceServer).IngestDocument(ctx, req.(*IngestDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LLMService_CreateCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LLMServiceServer).CreateCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LLMService_CreateCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LLMServiceServer).CreateCollection(ctx, req.(*CreateCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LLMService_ListCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCollectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LLMServiceServer).ListCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LLMService_ListCollections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LLMServiceServer).ListCollections(ctx, req.(*ListCollectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LLMService_DeleteCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LLMServiceServer).DeleteCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LLMService_DeleteCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LLMServiceServer).DeleteCollection(ctx, req.(*DeleteCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LLMService_ServiceDesc is the grpc.ServiceDesc for LLMService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LLMService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "llm.v1.LLMService",
	HandlerType: (*LLMServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IngestDocument",
			Handler:    _LLMService_IngestDocument_Handler,
		},
		{
			MethodName: "CreateCollection",
			Handler:    _LLMService_CreateCollection_Handler,
		},
		{
			MethodName: "ListCollections",
			Handler:    _LLMService_ListCollections_Handler,
		},
		{
			MethodName: "DeleteCollection",
			Handler:    _LLMService_DeleteCollection_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GenerateStream",
			Handler:       _LLMService_GenerateStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GenerateWithRAG",
			Handler:       _LLMService_GenerateWithRAG_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "llm/v1/llm.proto",
}
