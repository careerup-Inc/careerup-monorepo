// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: v1/chat.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ConversationService_Stream_FullMethodName = "/careerup.v1.ConversationService/Stream"
)

// ConversationServiceClient is the client API for ConversationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConversationServiceClient interface {
	Stream(ctx context.Context, opts ...grpc.CallOption) (ConversationService_StreamClient, error)
}

type conversationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConversationServiceClient(cc grpc.ClientConnInterface) ConversationServiceClient {
	return &conversationServiceClient{cc}
}

func (c *conversationServiceClient) Stream(ctx context.Context, opts ...grpc.CallOption) (ConversationService_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConversationService_ServiceDesc.Streams[0], ConversationService_Stream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &conversationServiceStreamClient{stream}
	return x, nil
}

type ConversationService_StreamClient interface {
	Send(*TokenRequest) error
	Recv() (*TokenResponse, error)
	grpc.ClientStream
}

type conversationServiceStreamClient struct {
	grpc.ClientStream
}

func (x *conversationServiceStreamClient) Send(m *TokenRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *conversationServiceStreamClient) Recv() (*TokenResponse, error) {
	m := new(TokenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConversationServiceServer is the server API for ConversationService service.
// All implementations must embed UnimplementedConversationServiceServer
// for forward compatibility
type ConversationServiceServer interface {
	Stream(ConversationService_StreamServer) error
	mustEmbedUnimplementedConversationServiceServer()
}

// UnimplementedConversationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConversationServiceServer struct {
}

func (UnimplementedConversationServiceServer) Stream(ConversationService_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedConversationServiceServer) mustEmbedUnimplementedConversationServiceServer() {}

// UnsafeConversationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConversationServiceServer will
// result in compilation errors.
type UnsafeConversationServiceServer interface {
	mustEmbedUnimplementedConversationServiceServer()
}

func RegisterConversationServiceServer(s grpc.ServiceRegistrar, srv ConversationServiceServer) {
	s.RegisterService(&ConversationService_ServiceDesc, srv)
}

func _ConversationService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ConversationServiceServer).Stream(&conversationServiceStreamServer{stream})
}

type ConversationService_StreamServer interface {
	Send(*TokenResponse) error
	Recv() (*TokenRequest, error)
	grpc.ServerStream
}

type conversationServiceStreamServer struct {
	grpc.ServerStream
}

func (x *conversationServiceStreamServer) Send(m *TokenResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *conversationServiceStreamServer) Recv() (*TokenRequest, error) {
	m := new(TokenRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConversationService_ServiceDesc is the grpc.ServiceDesc for ConversationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConversationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "careerup.v1.ConversationService",
	HandlerType: (*ConversationServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _ConversationService_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "v1/chat.proto",
}
